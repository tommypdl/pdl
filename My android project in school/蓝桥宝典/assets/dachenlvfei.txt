/*很久以前，T王国空前繁荣。为了更好地管理国家，王国修建了大量的快速路，用于连接首都和王国内的各大城市。

为节省经费，T国的大臣们经过思考，制定了一套优秀的修建方案，使得任何一个大城市都能从首都直接或者通过其他大城市间接到达。同时，如果不重复经过大城市，从首都到达每个大城市的方案都是唯一的。

J是T国重要大臣，他巡查于各大城市之间，体察民情。所以，从一个城市马不停蹄地到另一个城市成了J最常做的事情。他有一个钱袋，用于存放往来城市间的路费。

聪明的J发现，如果不在某个城市停下来修整，在连续行进过程中，他所花的路费与他已走过的距离有关，在走第x千米到第x+1千米这一千米中（x是整数），他花费的路费是x+10这么多。也就是说走1千米花费11，走2千米要花费23。

J大臣想知道：他从某一个城市出发，中间不休息，到达另一个城市，所有可能花费的路费中最多是多少呢？

输入格式：
输入的第一行包含一个整数n，表示包括首都在内的T王国的城市数
城市从1开始依次编号，1号城市为首都。
接下来n-1行，描述T国的高速路（T国的高速路一定是n-1条）
每行三个整数Pi, Qi, Di，表示城市Pi和城市Qi之间有一条高速路，长度为Di千米。

输出格式:
输出一个整数，表示大臣J最多花费的路费是多少。

样例输入:
5
1 2 2
1 3 1
2 4 5
2 5 4

样例输出:
135

样例说明:
大臣J从城市4到城市5要花费135的路费。*/

#include<stdio.h>
#include<string.h>
int a[1000][1010];

int main()
{
    int i,j,k,n,x,y,z,max,sum;
    scanf("%d",&n);

    for(i=0;i<=n;i++)
        for(j=0;j<=n;j++)
            a[i][j]=999999;
    for(i=1;i<n;i++)
    {
        scanf("%d%d%d",&x,&y,&z);
        a[x][y]=z;
        a[y][x]=z;
    }
    max=sum=0;
    for(k=1;k<=n;k++)
        for(i=1;i<=n;i++)
            for(j=1;j<=n;j++)
            if(i!=j)
            {
                    a[i][j]=a[i][k]+a[k][j]<a[i][j]?a[i][k]+a[k][j]:a[i][j];
            }
    for(i=0;i<=n;i++)
        for(j=0;j<=n;j++)
            if(a[i][j]<999999)
            max=a[i][j]>max?a[i][j]:max;
    for(i=1;i<=max;i++)
        sum+=(i+10);
    printf("%d\n",sum);
    return 0;
}



import java.util.*;
class Edge{
	int v1,v2;
	int weight;
	int vis;
}
class Main{
	static int n;
	static int len=0;
	static int cost;
	//static Edge[] edge=new Edge[1000];
	public static int getCost(int len){
		return (21+len)*len/2;
	}
	public static void dfs(int s,int e,Edge[] edge){
		int flag=0,p=0;
		for(int i=0;i<n-1;i++){
			if(edge[i].v1==s&&edge[i].v2==e||edge[i].v1==e&&edge[i].v2==s){
				flag=1;
				p=i;
				break;
			}
		}
		if(flag==1)
			cost=getCost(len+edge[p].weight);
		else{
			for(int i=0;i<n-1;i++){
				if(edge[i].vis==1&&edge[i].v1==s){
					edge[i].vis=1;
					len+=edge[i].weight;
					dfs(edge[i].v2,e,edge);
					edge[i].vis=0;
					len-=edge[i].weight;
				}
				if(edge[i].vis==1&&edge[i].v2==s){
					edge[i].vis=1;
					len+=edge[i].weight;
					dfs(edge[i].v1,e,edge);
					edge[i].vis=0;
					len-=edge[i].weight;
				}
			}
		}
	}
	
	public static void main(String args[]){
		Scanner s=new Scanner(System.in);
		n=s.nextInt();
		Edge[] edge=new Edge[n];
		int max=0;
		int tmp=n-1;
		for(int i=0;i<n-1;i++){
		edge[i].v1=s.nextInt();
		edge[i].v2=s.nextInt();
		edge[i].weight=s.nextInt();
		edge[i].vis=0;
		}
		for(int i=1;i<n;i++){
			for(int j=i+1;j<=n;j++){
				dfs(i,j,edge);
				max=max<cost?cost:max;
			}
		}
		System.out.println(max);
	}
}





import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class dada {
static int n,m,temp,V,i,j,sum,INF=100000;
static int arr[][],max;
static boolean vis[];
	public static void main(String[] args) {
		
		Scanner sc = new Scanner (new InputStreamReader(System.in));
		while(sc.hasNext()){
           n = sc.nextInt();
           arr = new int[n+1][n+1];
            max=0;
           for(i=1;i<=n;i++)
        	   for(j=1;j<=n;j++)
        		  arr[i][j]=INF;
           
           for( i=1;i<n;i++){
        	   int a =sc.nextInt();
        	   int b =sc.nextInt();
        	   arr[b][a] = arr[a][b] = sc.nextInt();
           }int i,MAX;
           for( i=1,MAX=0;i<=n;i++){
        	   vis = new boolean[n+1];  
	           vis[i] = true;
	           max = 0;
        	  temp = dfs(i,0);
        	  MAX = MAX<temp?temp:MAX; 
           }System.out.println(MAX*(MAX+21)/2);
 		}
	}
	private static int dfs(int s,int sum) {
             
        	 for(int i=1;i<=n;i++){
            	 if(!vis[i]&&arr[s][i]!=INF){
            		 vis[i] = true;
            		 sum +=arr[s][i];
            		 max = max<sum?sum:max;
                     dfs(i,sum);
                     sum -=arr[s][i];
            	 }
             } return max;
         }
	}