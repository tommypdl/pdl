1,问题描述
　　有一个箱子容量为V（正整数，0＜＝V＜＝20000），同时有n个物品（0＜n＜＝30），每个物品有一个体积（正整数）。
　　要求n个物品中，任取若干个装入箱内，使箱子的剩余空间为最小。
输入格式
　　第一行为一个整数，表示箱子容量；
　　第二行为一个整数，表示有n个物品；
　　接下来n行，每行一个整数表示这n个物品的各自体积。
输出格式
　　一个整数，表示箱子剩余空间。
样例输入
24
6
8
3
12
7
9
7
样例输出
0

import java.util.*;
public class Main{
	static int c,n,min=9999;
	static int a[];
	static int v[];
	public static void main(String[] args) {
		Scanner s=new Scanner(System.in);
		int c=s.nextInt();
		int n=s.nextInt();
		a=new int[n];
		v=new int[n];
		for(int i=0;i<n;i++)
			a[i]=s.nextInt();
	
		int b[]=new int[c+1];
		for(int i=0;i<n;i++){
			for(int j=c;j>=a[i];j--){
				if(b[j-a[i]]+a[i]>b[j])
					b[j]=b[j-a[i]]+a[i];
			}
		}
		System.out.println(c-b[c]);
		
		//System.out.println(min);
	}
	public static void f(int l){
		if(l>=n){
			int b=c;
			for(int i=0;i<n;i++){
				if(v[i]!=0)
					b-=a[i];
			}
			if(b>=0&&b<min)
				min=b;
		}else{
			v[l]=0;
			f(l+1);
			v[l]=1;
			f(l+1);
		}
	}
	
}


2,问题描述
　　金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。
更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎 么布置，
你说了算，只要不超过N元钱就行”。
今天一早金明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的N元。
于是，他把每件物品规定了一 个重要度，分为5等：用整数1~5表示，第5等最重要。
他还从因特网上查到了每件物品的价格（都是整数元）。他希望在不超过N元（可以等于N元）的前提 下
，使每件物品的价格与重要度的乘积的总和最大。
　　设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为 j1，j2，……，jk，则所求的总和为：
　　v[j1]*w[j1]+v[j2]*w[j2]+ …+v[jk]*w[jk]。（其中*为乘号）
　　请 你帮助金明设计一个满足要求的购物单。
输入格式
　　输入文件 的第1行，为两个正整数，用一个空格隔开：
　　N m
　　（其中N（<30000）表示总钱 数，m（<25）为希望购买物品的个数。）
　　从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有2个非负整数
　　v p
　　（其中v表示该物品的价格(v<=10000)，p表示该物品的重要度(1~5)）
输出格式
　　输出文件只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（<100000000）。
样例输入
1000 5
800 2
400 5
300 5
400 3
200 2
样例输出
3900

import java.util.*;
public class Main {

	
	public static void main(String[] args) {
		Scanner s=new Scanner(System.in);
		int n=s.nextInt();
		int m=s.nextInt();
		int cost[]=new int[m];
		int value[]=new int[m];
		for(int i=0;i<m;i++){
			cost[i]=s.nextInt();
			value[i]=s.nextInt();
			
		}
		int b[]=new int[n+1];
		for(int i=0;i<m;i++){
			for(int j=n;j>=cost[i];j--){
				if(b[j-cost[i]]+cost[i]*value[i]>b[j])
					b[j]=b[j-cost[i]]+cost[i]*value[i];
			}
		}
		System.out.println(b[n]);
	}

}
