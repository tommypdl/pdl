问题描述
Farmer John变得非常懒，他不想再继续维护供奶牛之间供通行的道路。道路被用来连接N个牧场，牧场被连续地编号为1到N。
每一个牧场都是一个奶牛的家。FJ计划除去P条道路中尽可能多的道路，但是还要保持牧场之间 的连通性。
你首先要决定那些道路是需要保留的N-1条道路。第j条双向道路连接了牧场Sj和Ej(1 <= Sj <= N; 1 <= Ej <= N; Sj != Ej)，
而且走完它需要Lj的时间。
没有两个牧场是被一条以上的道路所连接。奶牛们非常伤心，因为她们的交通系统被削减了。你需要到每一个奶牛的住处去安慰她们。
每次你到达第i个牧场的时候(即使你已经到过)，你必须花去Ci的时间和奶牛交谈。你每个晚上都会在同一个牧场(这是供你选择的)过夜，
直到奶牛们都从悲伤中缓过神来。
在早上 起来和晚上回去睡觉的时候，你都需要和在你睡觉的牧场的奶牛交谈一次。这样你才能完成你的 交谈任务。假设Farmer John采纳了你的建议，
请计算出使所有奶牛都被安慰的最少时间。

输入格式
第1行包含两个整数N和P。

接下来N行，每行包含一个整数Ci。

接下来P行，每行包含三个整数Sj, Ej和Lj。

输出格式
输出一个整数, 所需要的总时间(包含和在你所在的牧场的奶牛的两次谈话时间)。
样例输入
5 7
10
10
20
6
30
1 2 5
2 3 5
2 4 12
3 4 17
2 5 15
3 5 6
样例输出
176
数据规模与约定
5 <= N <= 10000，N-1 <= P <= 100000，0 <= Lj <= 1000，1 <= Ci <= 1,000。

 

其实测试用例少了一组，因为路线给有7条，事实只有6条

那么如果改为

5 6
10
10
20
6
30
1 2 5
2 3 5
2 4 12
3 4 17
2 5 15
3 5 6
那么结果是178

 

知道了这点之后，我们令边值为l，令节点权值为w，
那么每个节点的实际权值可以表示为2*l+w,那么我们可以根据这个来求得最小生成树，
然后考虑休息点的选择，只需要选最小的节点即可

#include <stdio.h>  
#include <string.h>  
#include <algorithm>  
using namespace std;  
const int inf = 1<<30;  
int point[111111];  
int pre[111111];  
int n,m,sum;  
  
struct node  
{  
    int x,y,w;  
} e[111111];  
  
int cmp(node a,node b)  
{  
    return a.w<b.w;  
}  
  
int find(int x)  
{  
    if(pre[x]==x)  
    return x;  
    int t = find(pre[x]);  
    pre[x] = t;  
    return t;  
}  
  
int main()  
{  
    int i,j,minn = inf;  
    scanf("%d%d",&n,&m);  
    for(i = 1; i<=n; i++)  
    {  
        scanf("%d",&point[i]);  
        minn = min(minn,point[i]);  
        pre[i] = i;  
    }  
    for(i = 1; i<=m; i++)  
    {  
        scanf("%d%d%d",&e[i].x,&e[i].y,&e[i].w);  
        e[i].w = 2*e[i].w+point[e[i].x]+point[e[i].y];  
    }  
    sort(e+1,e+m+1,cmp);  
    sum = 0;  
    for(i = 1;i<=m;i++)  
    {  
        int fx = find(e[i].x);  
        int fy = find(e[i].y);  
        if(fx!=fy)  
        {  
            sum+=e[i].w;  
            pre[fx] = fy;  
        }  
    }  
    printf("%d\n",sum+minn);  
  
    return 0;  
}  

 