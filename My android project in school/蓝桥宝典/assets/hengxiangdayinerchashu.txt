问题描述
二叉树可以用于排序。其原理很简单：对于一个排序二叉树添加新节点时，先与根节点比较，若小则交给左子树继续处理，否则交给右子树。

当遇到空子树时，则把该节点放入那个位置。

比如，10 8 5 7 12 4 的输入顺序，应该建成二叉树如下图所示，其中.表示空白。

...|-12
10-|
...|-8-|
.......|...|-7
.......|-5-|
...........|-4
本题目要求：根据已知的数字，建立排序二叉树，并在标准输出中横向打印该二叉树。

输入格式
输入数据为一行空格分开的N个整数。 N<100，每个数字不超过10000。

输入数据中没有重复的数字。

输出格式
输出该排序二叉树的横向表示。为了便于评卷程序比对空格的数目，请把空格用句点代替：

样例输入1
10 5 20
样例输出1
...|-20
10-|
...|-5
样例输入2
5 10 20 8 4 7
样例输出2
.......|-20
..|-10-|
..|....|-8-|
..|........|-7
5-|
..|-4


import java.util.*;
public class Main {

	
	public static void main(String[] args) {
		 
		Scanner s=new Scanner(System.in);
		String str=s.nextLine();
		String[] c=str.split(" ");
		int n[]=new int[c.length];
		for(int i=0;i<c.length;i++){
			n[i]=Integer.parseInt(c[i]);
		}
		
		
        Node root = new Node(n[0]);  
        root.s =root.e+"-|";   
        for (int i = 1; i < n.length; i++) {  
            Node node = new Node(n[i]);  
            if(node.e>root.e){  
               
                addRight(node,root,0);  
            }else{  
               
                addLeft(node,root,0);  
            }  
        }  
        print(root);  
	}
	private static void print(Node root) {  
        if(root.right!=null){  
            print(root.right);  
        }  
        
        if(root.left==null&&root.right==null){  
            System.out.println(root.s.substring(0,root.s.length()-2));  
        }else{  
            System.out.println(root.s);   
        }  
          
        if(root.left!=null){  
            print(root.left);  
        }  
    }  
  
    private static void addRight(Node node, Node root,int n) {  
        
        if(root.right==null){  
           
            if(n==0){  
                //node.s = root.s.replaceAll("[0-9]", ".").replaceAll("-", ".").substring(0, root.s.length()-1).replace('|', '.')+"|-"+node.e+"-|";  
                node.s = root.s.replaceAll("[0-9]", ".").replaceAll("-", ".").substring(0, root.s.length()-1);  
                int index = node.s.lastIndexOf('|');  
                if(index!=-1){  
                    node.s = node.s.substring(0,index)+"."+node.s.substring(index+1);  
                }  
                node.s = node.s+"|-"+node.e+"-|";  
            }else{  
                node.s = root.s.replaceAll("[0-9]", ".").replaceAll("-", ".")+"-"+node.e+"-|";    
            }  
              
            root.right = node;  
            return;  
        }  
        if(node.e>root.right.e){  
            addRight(node, root.right,0);  
        }else{  
            addLeft(node, root.right,1);  
        }  
          
    }  
  
    private static void addLeft(Node node, Node root,int n) {  
        
        if(root.left==null){  
           
            if(n==0){  
                node.s = root.s.replaceAll("[0-9]", ".").replaceAll("-", ".").substring(0, root.s.length()-1);  
                int index = node.s.lastIndexOf('|');  
                if(index!=-1){  
                    node.s = node.s.substring(0,index)+"."+node.s.substring(index+1);  
                }  
                node.s = node.s+"|-"+node.e+"-|";  
            }else{  
                node.s = root.s.replaceAll("[0-9]", ".").replaceAll("-", ".")+"-"+node.e+"-|";    
            }  
            root.left = node;  
            return;  
        }  
        if(node.e>root.left.e){  
            addRight(node, root.left,1);  
        }else{  
            addLeft(node, root.left,0);  
        }  
    }  
}  
class Node{  
    int e;  
    Node left;  
    Node right;  
    String s;  
    public Node(int e) {  
        this.e = e;  
    }  
      

}
