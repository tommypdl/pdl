
题目标题：翻硬币

    小明正在玩一个“翻硬币”的游戏。

    桌上放着排成一排的若干硬币。我们用 * 表示正面，用 o 表示反面（是小写字母，不是零）。

    比如，可能情形是：**oo***oooo
    
    如果同时翻转左边的两个硬币，则变为：oooo***oooo

    现在小明的问题是：如果已知了初始状态和要达到的目标状态，每次只能同时翻转相邻的两个硬币,那么对特定的局面，最少要翻动多少次呢？
    我们约定：把翻动相邻的两个硬币叫做一步操作，那么要求：
   
程序输入：
两行等长的字符串，分别表示初始状态和要达到的目标状态。每行的长度<1000

程序输出：
一个整数，表示最小操作步数

例如：
用户输入：
**********
o****o****

程序应该输出：
5

再例如：
用户输入：
*o**o***o***
*o***o**o***

程序应该输出：
1





public class Main
{
	static void create(String s)
	{
		char[] aa = s.toCharArray();
		
		for(int i=0; i<30; i++)
		{
			int k = (int)(Math.random() * s.length());
			if(aa[k]=='*')
				aa[k] = 'o';
			else
				aa[k] = '*';
		}		
		
		System.out.println(s);
		System.out.println(new String(aa));
	}
	
	static void test(String a, String b)
	{
		boolean fan = false;
		int n = 0;
		int N = 0;
		for(int i=0; i<a.length(); i++)
		{
			if(a.charAt(i) != b.charAt(i)){	
				fan = !fan;
				N++;
			}				
			if(fan) n++;
		}
		
		System.out.println(a);
		System.out.println(b);
		System.out.println("fan=" + n);
		System.out.println("N=" + N);
	}
	
	public static void main(String[] args)
	{
		//create("*o***oo***o****o*****oo*****oooo***oo*o*ooooo*******");

			
		test("******************","***oo**oo***oo****");
		
		test("*o***oo***o****o*****oo*****oooo***oo*o*ooooo*******"
			,"*o***oo**oo****o*****oo****oo**o***oo*o*ooooo*******");	
			
		test("*o***oo***o****o*****oo*****oooo***oo*o*ooooo*******"
			,"*oo***oo*oo*****o****o****o*oo*o*oo***o*ooooo****o**");	
	}
}



  