问题描述
　　小明先把硬币摆成了一个 n 行 m 列的矩阵。

　　随后，小明对每一个硬币分别进行一次 Q 操作。

　　对第x行第y列的硬币进行 Q 操作的定义：将所有第 i*x 行，第 j*y 列的硬币进行翻转。

　　其中i和j为任意使操作可行的正整数，行号和列号都是从1开始。

　　当小明对所有硬币都进行了一次 Q 操作后，他发现了一个奇迹――所有硬币均为正面朝上。

　　小明想知道最开始有多少枚硬币是反面朝上的。于是，他向他的好朋友小M寻求帮助。

　　聪明的小M告诉小明，只需要对所有硬币再进行一次Q操作，即可恢复到最开始的状态。然而小明很懒，不愿意照做。于是小明希望你给出他更好的方法。帮他计算出答案。
输入格式
　　输入数据包含一行，两个正整数 n m，含义见题目描述。
输出格式
　　输出一个正整数，表示最开始有多少枚硬币是反面朝上的。
样例输入
2 3
样例输出
1

#include <iostream>  
#include <string>  
using namespace std;  
  
//两个字符串相乘   
string strMultiply(string str1 , string str2)  
{  
    string strResult = "";  
    int len1 = str1.length();   
    int len2 = str2.length();  
    int num[500] = {0};  
    int i = 0, j = 0;     
    for(i = 0; i < len1; i++)  
    {  
        for(j = 0; j < len2; j++)  
        {  
            num[len1-1 - i + len2-1 - j] += (str1[i] - '0')*(str2[j] - '0');   
        }  
    }  
      
    for(i = 0; i < len1 + len2; i++)  
    {  
        num[i+1] += num[i] / 10;  
          
        num[i] = num[i] % 10;  
    }  
      
    for(i = len1 + len2 - 1; i >= 0 ; i--)  
    {  
        if(0 != num[i]) break;  
    }  
      
    for(j = i; j >= 0; j--)  
    {  
        strResult += num[j] + '0';  
    }  
    return strResult;  
}  
  
//str1 * 10^pos后(即在str1后添上pos个0)，与str2作比较  
int compare(string str1, string str2, int pos)  
{  
    int len1 = str1.length();  
    int len2 = str2.length();  
    if(len2 > len1+pos) return 0;  
    if(len2 < len1+pos) return 1;  
    int i = 0;  
    for(i = 0; i < len2; i++)  
    {  
        if(str1[i]-'0' > str2[i]-'0') return 1;  
        if(str1[i]-'0' < str2[i]-'0') return 0;  
    }  
    return 0;  
}  
  
//对大数str开方取整  
string sqrtLarge(string str)  
{  
    int len = str.length();  
    int i = 0;   
    int j = 0;  
    string strResult = "";  
    string str1 = "";  
    if(0 == len % 2)  
    {         //为偶数位  
        for(i = 0; i < len/2; i++)  
        {  
            for(j = 0; j < 10; j++)  
            {  
                str1 = strResult;  
                str1 += j + '0';  
                if(1 == compare(strMultiply(str1, str1) , str , 2*(len/2-i-1)) )  
                {         //由于str1后少了len/2-i-1个0，所以平方以后少了2*(len/2-i-1)个  
                    strResult +=  j-1 + '0';  
                    break;  
                }  
                if(9 == j) strResult += '9';  
            }  
        }  
    }  
    else  
    {       //为奇数位  
        for(i = 0; i < len/2+1; i++)  
        {  
            for(j = 0; j < 10; j++)  
            {  
                str1 = strResult;  
                str1 += j + '0';  
                if(1 == compare(strMultiply(str1, str1) , str , 2*(len/2-i)) )  
                {  
                    strResult +=  j-1 + '0';  
                    break;  
                }  
                if(9 == j) strResult += '9';  
            }  
        }  
    }  
    return strResult;  
}  
int main()  
{  
    string str1;  
    string str2;  
    string strResult;  
    cin>>str1>>str2;  
      
    cout<<strMultiply(sqrtLarge(str1) , sqrtLarge(str2))<<endl;  
      
    return 0;  
}