问题描述
　　形如2P-1的素数称为麦森数，这时P一定也是个素数。但反过来不一定，即如果P是个素数，2P-1不一定也是素数。到1998年底，人们已找到了37个麦森数。最大的一个是P=3021377，它有909526位。麦森数有许多重要应用，它与完全数密切相关。
　　任务：从文件中输入P（1000<P<3100000），计算2P-1的位数和最后500位数字（用十进制高精度数表示）
输入格式
　　文件中只包含一个整数P（1000<P<3100000）
输出格式
　　第一行：十进制高精度数2P-1的位数。
　　第2-11行：十进制高精度数2P-1的最后500位数字。（每行输出50位，共输出10行，不足500位时高位补0）
　　不必验证2P-1与P是否为素数。
样例输入
1279
样例输出
386
00000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000
00000000000000104079321946643990819252403273640855
38615262247266704805319112350403608059673360298012
23944173232418484242161395428100779138356624832346
49081399066056773207629241295093892203457731833496
61583550472959420547689811211693677147548478866962
50138443826029173234888531116082853841658502825560
46662248318909188018470682222031405210266984354887
32958028878050869736186900714720710555703168729087



// c/c++
#include<iostream>
#include<math.h>
#include<string.h>
using namespace std;
unsigned b[501];
unsigned a[501];
unsigned * cal1(unsigned *a)
{
    for(int i=0;i<500;i++)
    {
        b[i] = a[i];
        a[i] = 0;
    }
    int i,j;
    for(i=0;i<500;i++)
    {
        int k =0;
        for(j=i;j<500;j++)
        {
            a[j] += b[k]*b[i];
            k++;
        }
    }
    for(i = 0;i<500;i++)
    {
        a[i+1] += a[i]/10 ;
        a[i] %= 10;
    }
    return a;
}
unsigned * cal2(unsigned *a)
{
    int m=0;
    for(int j=0;j<500;j++)
    {
        a[j]*=2;
        int temp = a[j]/10;
        a[j] %= 10;a[j]+= m;m = temp;
    }
    return a;
}
unsigned * multi(int m)
{
    if(m == 1) return a;
    if(m%2 == 0)
    {
        unsigned *temp;
        return cal1(multi(m/2));
    }
    else
    {
        return cal2(cal1(multi(m/2)));
    }
}
int main()
{
    int p;double l;
    memset(a,0,sizeof(a));
    memset(b,0,sizeof(b));
    a[0]=2;
    cin>>p;
    unsigned  *ans = multi(p);
    l = p * log10(2.0) +1;
    cout<<(int)l<<endl;
    a[0]-=1;
    for(int i=10;i>=1;i--)
    {
        for(int j = 50*i-1;j>=50*(i-1);j--)
        {
            cout<<a[j];
        }
        cout<<endl;
    }
    return 0;
}



//java
import java.math.BigInteger;
import java.util.*;
public class Main {

	
	public static void main(String[] args) {
		Scanner s=new Scanner(System.in);
		int n=s.nextInt();
		BigInteger a=g(n);
		a=a.subtract(BigInteger.ONE);
		String str=a+"";
		System.out.print(str.length());
		if(str.length()<500){
			String ss="";
			for(int i=0;i<500;i++)
				ss+="0";
			str=ss+str;
		}
		
		String sb=str.substring(str.length()-500, str.length());
		StringBuilder sd=new StringBuilder(sb);
		for(int i=0;i<=500;i+=51){
			sd.insert(i, "\n");
		}
		System.out.println(sd);
	}
	public static BigInteger g(int n){
		if(n==0)return BigInteger.ONE;
		if(n==1)return BigInteger.valueOf(2);
		int m=n/2;
		BigInteger a=g(m);
		if(n%2==0)
			return a.multiply(a);
		else
			return a.multiply(a).multiply(BigInteger.valueOf(2));
	}
}
